---
layout: post
title:  "积分商城重构之路"
date:   2017-07-26 10:40:17 +0800
categories: technical
---
和大多数成长型创业公司一样，兑吧积分商城系统也经历了成长的“阵痛”，从最初的单体应用，逐渐演变成今天的分布式架构，重构之路困难重重，在不影响业务快速发展的前提下去重构，既要保障业务需求快速迭代又要保障线上不出问题；在业务快速发展，人手奇缺的情况下，技术团队克服万难，实现了积分商城架构的全新转变。在重构之路上，技术团队有分歧、有争执、有汗水，但最终获得了成功和喜悦。

# 积分商城架构1.0

在创业初期，积分商城研发人员少，业务量也不大，因此采用单体应用的垂直架构是顺理成章的选择。随着业务的发展，在这样一个系统内，陆续聚集了活动、游戏、普通兑换、秒杀等业务，同时，业务量峰值不断被刷新。

业务量上去之后，系统的问题开始凸显。某月某日，某个游戏的访问量猛增，由于代码中存在循环调用，占用了大量系统资源，导致请求处理缓慢，最终系统宕机。这个问题除了代码层面的原因，也有架构方面的原因。

由于所有业务都在一个单体应用内，虽然通过负载均衡做了集群部署，但不同业务没有做隔离，这样如果有个别业务出现故障，导致应用宕机，城门失火，殃及池鱼，会造成其他业务也无法提供服务。

# 积分商城架构2.0

为了提升积分商城系统稳定性，开始了架构的升级改造。通过对积分商城业务做垂直切分，分别独立出了门户系统、活动系统、商品系统、交易系统和秒杀系统，并将原来的积分商城业务分别重构迁移到新的五大垂直系统中。这五大系统都采用分布式架构，采用服务化框架，底层数据使用阿里云。

这样改造完成后，即使有业务故障导致服务宕机，也只会影响某个垂直业务，而不会造成整个积分商城无法服务；另外，垂直化业务后，根据业务量的不同，可以更灵活地、针对性地实现服务水平伸缩。

分布式和服务化之后，系统越来越多，系统监控诉求日益凸显，于是，我们引入监控告警，并实现了对所以业务系统的全覆盖，这样所有系统的运行状态、服务的状况都可以及时掌握。当系统出现异常时，相关负责人能第一时间收到告警信息，并针对性地定位解决，极大地加快了问题解决效率，也降低了系统宕机风险。

通过对积分商城架构的升级，系统稳定性提升明显，2017 Q2系统可用性100%。

# 数据库拆分

在最开始的时候，积分商城数据库也是单库单表，随着业务的增加，部分表的数据量达到了几亿行，有的甚至十几亿行，在业务高峰时，数据库已经不堪重负，到了不得不拆分的时候了。

库拆分主要根据业务来，将那些访问量大，数据增长快的数据库独立出去，以减轻主库压力；表拆分是将原来的单表拆分为1024表，以解决单表性能瓶颈。

# 改造中遇到的困难

对线上系统的改造犹如给飞驰的汽车换引擎，每一次的改造都如履薄冰。在这个过程中，我们遇到了很多实际的问题，比较突出的是以下3点：

## 如何做到业务无感知

在积分商城的重构过程中，有很多的改造时涉及数据迁移的，为了确保重构不影响线上业务，我们做了大量细致的工作。

有时为了一个数据的迁移，需要在一个时间段修改代码发布，然后再修改再发布，反反复复重复3次，前期的测试也是需要经过3阶段测试；目的就是为了保证不管是在发布前、发布中和发布后，业务上都是完全正确的。

## 如何平衡业务开发

在系统重构的同时，我们的业务也在快速的迭代，如何平衡两边的工作就成了一个问题。一开始我们是采用集中力量重构的方式进行，首先进行了活动中心的改造，并集中测试力量测试。这样实施的优点在于改造进度快，但是在业务优先的前提下，因为需要抽调大量测试资源，会对业务开发进度产生影响。

同时，每次的改动面会非常大，上线风险很高，回滚策略也难以设计。每次的开发周期都很长，开发结束时都需要大量花费大量的时间合并代码同步更新。之后在首次进行交易中心的改造时，在无法抽调足够的测试资源的前提下，出于降低风险的考虑，并没有上线。之后我们改小了每次改造的粒度，分步改造，较好的解决了这个问题。

## 曲直架构路

现在看到的积分商城架构2.0看上去比较完美，但从1.0到2.0的重构之路走得并不那么一帆风顺。

一开始设计时考虑的是业务逻辑多放在Service层，但是实践时发现，因为业务复杂，如果放在center层会出现同级系统间的调用，耦合严重。经过多次讨论，最终选择了将大部分业务上移到web层，部分功能改用消息队列异步处理实现的方式解决。

## 制度保障

通过一系列的重构优化后，系统稳定性得到保证，为了保证系统的长期稳定，我们探索了一套保障制度：

- 技术方案评审：对照checklist评估方案可行性，提前暴露风险；
- Code Review：提高代码质量，避免问题代码上线；
- 线上日志告警：提前暴露风险点，有问题及时修复；
- 业务异常告警：将线上业务告警及时推送给相关Owner，保证第一时间知晓问题并解决；
- 服务可用性监控：保证应用的高可用性，确保在发生故障第一时间知晓并解决
